{"version":3,"sources":["Components/ContactList/ContactList.module.css","Components/Filter/Filter.module.css","Components/ContactForm/ContactForm.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","Components/Title/Title.js","Components/Loader/Loader.js","redux/contacts/contacts-operations.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","itemsReduser","createReducer","_","payload","state","filter","id","loading","filterReducer","error","combineReducers","items","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactsReducer","devTools","process","Title","children","LoaderComponent","type","color","height","width","timeout","axios","defaults","baseURL","dispatch","a","get","data","newContact","post","then","catch","delete","connect","isLoading","onSubmit","contact","contactOperations","useState","name","setName","number","setNumber","nameInputId","shortid","generate","phoneInputId","handleInputChange","e","currentTarget","value","Loader","className","styles","form","event","preventDefault","currentName","find","toLowerCase","alert","coincidence","label","htmlFor","pattern","title","input","onChange","required","btn","ContactList","onDeleteContact","useDispatch","useEffect","operations","console","log","style","list","map","item","onClick","defaultProps","getVisibleContacts","allContats","normalizedFilter","includes","fetchContacts","Filter","propsTypes","string","isPequired","target","App","totalContactsCount","visibleContactsCount","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28849fea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1krQ7\",\"item\":\"ContactList_item__3Eh9X\",\"name\":\"ContactList_name__21rVU\",\"btn\":\"ContactList_btn__hpMUn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__3Q7Vf\",\"btn\":\"Filter_btn__17_F9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__MhL5X\",\"label\":\"ContactForm_label__2Ymjm\",\"input\":\"ContactForm_input__2N26J\",\"btn\":\"ContactForm_btn__350Fu\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchContactsRequest = createAction('contacts /fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contact/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts / addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contact/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts / deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contact/deleteContactError');\r\n\r\n\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactSuccess,\r\n    addContactRequest,\r\n    addContactError,\r\n    deleteContactSuccess,\r\n    deleteContactRequest,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    changeFilter,\r\n} from './contacts-actions';\r\n\r\n\r\n\r\n\r\nconst itemsReduser = createReducer([], {\r\n    [fetchContactsSuccess]: (_, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) =>\r\n        state.filter(({ id }) => id !== payload),\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n});\r\n\r\n\r\nconst filterReducer = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n    items: itemsReduser,\r\n    filter: filterReducer,\r\n    loading,\r\n    error,\r\n});","\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport logger from 'redux-logger';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\n\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","function Title({ children }) {\r\n    return (\r\n        <>\r\n            <h1>{children}</h1>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Title;\r\n","import Loader from \"react-loader-spinner\";\r\n\r\nconst LoaderComponent = () => {\r\n    return (\r\n        <Loader\r\n            type=\"Puff\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n            timeout={3000} //3 secs\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoaderComponent;","import axios from 'axios';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactSuccess,\r\n    addContactRequest,\r\n    addContactError,\r\n    deleteContactSuccess,\r\n    deleteContactRequest,\r\n    deleteContactError,\r\n}\r\n    from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n\r\n        dispatch(fetchContactsSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error));\r\n    }\r\n};\r\n\r\nconst addContact = newContact => dispatch => {\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', newContact)\r\n        .then(({ data }) =>\r\n            dispatch(addContactSuccess(data)),\r\n        )\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest);\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(deleteContactSuccess(id)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n    fetchContacts,\r\n    addContact,\r\n    deleteContact\r\n};","import React, { useState } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport LoaderComponent from '../Loader';\r\nimport contactOperations from '../../redux/contacts/contacts-operations';\r\n// import store from \"../../redux/store\";\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nimport styles from './ContactForm.module.css';\r\n\r\nconst ContactForm = ({ contacts, onSubmit, isLoading }) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const nameInputId = shortid.generate();\r\n    const phoneInputId = shortid.generate();\r\n\r\n\r\n    const coincidence = currentName => {\r\n        if (!contacts) { return }\r\n\r\n        if (contacts.find(({ name }) => name.toLowerCase() === currentName)) {\r\n            alert(`${currentName} is already in contacts`);\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (coincidence(name.toLowerCase())) return;\r\n\r\n        onSubmit({ name, number });\r\n\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <LoaderComponent />}\r\n            < form\r\n                className={styles.form} onSubmit={handleSubmit} >\r\n                <>\r\n                    <label className={styles.label} htmlFor={nameInputId}>\r\n                        Name:\r\n                    </label>\r\n                    <input type=\"text\" name=\"name\" pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        className={styles.input}\r\n                        id={nameInputId}\r\n                        value={name}\r\n                        onChange={handleInputChange}\r\n                        required />\r\n\r\n                    <label className={styles.label} htmlFor={phoneInputId} >\r\n                        Number:\r\n                    </label>\r\n                    <input type=\"tel\" name=\"number\" id={phoneInputId}\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        className={styles.input} value={number} onChange={handleInputChange} required />\r\n\r\n                    <button type=\"submit\"\r\n                        className={styles.btn} >\r\n                        Add contact\r\n                    </button>\r\n                </>\r\n            </form >\r\n        </>\r\n    )\r\n};\r\n\r\nContactForm.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.shape(PropTypes.string.isRequired)),\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts.items,\r\n    isLoading: state.contacts.loading,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: contact => dispatch(contactOperations.addContact(contact)),\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { connect, useDispatch, } from 'react-redux';\r\nimport operations from '../../redux/contacts/contacts-operations';\r\nimport LoaderComponent from '../Loader';\r\nimport style from './ContactList.module.css';\r\nimport { useEffect } from 'react';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact, isLoading }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(operations.fetchContacts())\r\n    }, [dispatch]);\r\n\r\n    console.log(contacts)\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <LoaderComponent />}\r\n            <ul className={style.list}>\r\n                {contacts.map(({ id, name, number }) => {\r\n                    return (\r\n                        <li key={id} className={style.item}>\r\n                            <span>{name}</span><span>{number}</span>\r\n                            <button\r\n                                className={style.btn}\r\n                                type=\"button\"\r\n                                id={id}\r\n                                onClick={() => onDeleteContact(id)}\r\n                            >\r\n                                Delete</button>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\nContactList.defaultProps = {\r\n    contacts: []\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: propTypes.array,\r\n    onDeleteContact: propTypes.func.isRequired\r\n};\r\n\r\nconst getVisibleContacts = (allContats, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return allContats.filter(({ name }) =>\r\n        name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contacts: getVisibleContacts(state.contacts.items, state.contacts.filter),\r\n    isLoading: state.contacts.loading,\r\n\r\n});\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchContacts: () => dispatch(operations.fetchContacts()),\r\n    onDeleteContact: id => dispatch(operations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\r\nimport propsTypes from 'prop-types'\r\n// import shortid from 'shortid';\r\nimport styles from './Filter.module.css';\r\n\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n    // const inputListId = shortid.generate();\r\n    return (\r\n        <div>\r\n            {/* <label className={styles.label}\r\n                // htmlFor={inputListId}\r\n            >\r\n            </label> */}\r\n            <p> Find contacts by name</p>\r\n            <input\r\n                type=\"text\"\r\n                className={styles.input}\r\n                // id={inputListId}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nFilter.defaultProps = {\r\n    value: ' '\r\n}\r\nFilter.propsTypes = {\r\n    value: propsTypes.string,\r\n    onChange: propsTypes.isPequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\n","\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Title from './Components/Title';\r\nimport ContactForm from './Components/ContactForm';\r\nimport ContactList from './Components/ContactList';\r\nimport Filter from './Components/Filter';\r\nimport './App.css';\r\n\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Title>Phonebook</Title>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nApp.defaultProps = {\r\n  totalContactsCount: null,\r\n  visibleContactsCount: null\r\n}\r\nApp.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape(\r\n      {\r\n        id: PropTypes.any.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.number.isRequired,\r\n      })\r\n  ),\r\n  filter: PropTypes.string,\r\n  totalContactsCount: PropTypes.number,\r\n  visibleContacts: PropTypes.number,\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './redux/store.js';\r\n// import { PersistGate } from 'redux-persist/integration/react'\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}